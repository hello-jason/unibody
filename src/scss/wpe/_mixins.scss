/**
 * Replace `$search` with `$replace` in `$string`
 * @author Hugo Giraudel
 * @param {String} $string - Initial string
 * @param {String} $search - Substring to replace
 * @param {String} $replace ('') - New value
 * @return {String} - Updated string
 */
@function str-replace( $string, $search, $replace: '' ) {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function urlencode( $str ) {
	$vars: ( "%": "%25", "#": "%23", "<": "%3C", ">": "%3E", "=": "%3D", '"': "%22", ":": "%3A", "/": "%2F", ",": "%2C" );

	@each $search, $replace in $vars {
		$str: str-replace( $str, $search, $replace );
	}

	@return $str;
}

/**
 * Generates a background with corners cut out
 * @param  {bool}  $tl           Top Left: `true` for a cut-out corner, `false` for a square corner
 * @param  {bool}  $tr           Top Right: `true` for a cut-out corner, `false` for a square corner
 * @param  {bool}  $br           Bottom Right: `true` for a cut-out corner, `false` for a square corner
 * @param  {bool}  $bl           Bottom Left: `true` for a cut-out corner, `false` for a square corner
 * @param  {int}   $corner-size  Size of the cut-out corner in pixels
 *
 * @return {css}                 Background image with cut-out colors
 */
@mixin corners( $tl: false, $tr: true, $br: true, $bl: false, $corner: 10px ) {
	$path: 'polygon(';

	$path: $path + if( $tl, '0 #{$corner}, #{$corner} 0, ', '0 0, ' );

	$path: $path + if( $tr, 'calc(100% - #{$corner}) 0, 100% #{$corner}, ', '100% 0, ' );

	$path: $path + if( $br, '100% calc(100% - #{$corner}), calc(100% - #{$corner}) 100%, ', '100% 100%, ' );

	$path: $path + if( $bl, '#{$corner} 100%, 0 calc(100% - #{$corner})', '0 100%' );

	$path: $path + ')';

	clip-path: url(corners.svg);
	clip-path: #{$path};
	-webkit-clip-path: #{$path};

	// Add our parameters as the `after` content so that our polyfill can get the settings easily
	&:after {
		display: none;
		content: '#{$tl + ' ' + $tr + ' ' + $br + ' ' + $bl + ' ' + $corner}';
	}
}

@mixin flex( $direction: row, $wrap: wrap ) {
	display: flex;
	flex-flow: #{$direction} #{$wrap};
}

@mixin page-width($width) {
	max-width: $width;
	margin-left: auto;
	margin-right: auto;
}

%page-width {
	@include page-width($page-width);
}

.page-width {
	@extend %page-width;
}

%page-width-bootstrap {
	@include page-width( $page-width + ( $gutter-small * 2 ) );
}

.page-width-bootstrap {
	@extend %page-width-bootstrap;
}

%layout-container-padding {
	padding-left: $gutter-small;
	padding-right: $gutter-small;

	@media (min-width: $md) {
		padding-left: $gutter;
		padding-right: $gutter;
	}
}

%layout-container-padding-large {
	padding-left: $gutter-small;
	padding-right: $gutter-small;

	@media (min-width: $md) {
		padding-left: $gutter-large;
		padding-right: $gutter-large;
	}
}

%layout-item-padding {
	padding-left: $gutter-small;
	padding-right: $gutter-small;

	@media (min-width: $md) {
		padding-left: $gutter;
		padding-right: $gutter;

		// All items inside entry-content should have a left margin except divs.
		// All items inside the 1st-level divs should have a left margin
		> * {
			margin-left: $gutter;
		}

		> div, > aside {
			margin-left: 0;

			> * {
				margin-left: $gutter;
			}
		}
	}
}

%layout-content-sidebar {
	@extend %page-width;
	@include flex();
	padding-right: 0;

	.content {
		flex: 1 1 100%;
		max-width: 100%;
		padding-bottom: $gutter;

		> *:last-child {
			margin-bottom: 0;
		}
	}

	.sidebar {
		flex: 1 1 100%;
	}

	@media (min-width: $sm) {
		.content {
			flex-basis: 66.6%;
		}

		.sidebar {
			flex-basis: 33.3%;
			padding-right: $gutter-small;
		}
	}

	@media (min-width: $md) {
		padding-right: $gutter;

		.content {
			flex-basis: 70%;
			width: 70%;
		}

		.sidebar {
			flex-basis: 20%;
		}
	}
}

%responsive-img {
	overflow: hidden;

	img {
		display: block;
		width: 100%;
		height: auto;
		max-width: initial;
		max-height: initial;
	}

	@media (min-width: $sm) {
		img {
			width: auto;
			height: 100%;
		}
	}
}

%responsive-thumbnail {
	@extend %responsive-img;

	@media (min-width: $sm) {
		height: 150px;

		img {
			width: auto;
			height: 100%;
		}
	}
}

@mixin vertical-align {
	position: absolute;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

%vertical-align {
	@include vertical-align;
}

@mixin vertical-horizontal-align {
	position: absolute;
	top: 50%;
	left: 50%;
	-webkit-transform: translate(-50%, -50%);
	-ms-transform: translate(-50%, -50%);
	transform: translate(-50%, -50%);
}

%vertical-horizontal-align {
	@include vertical-horizontal-align;
}

@mixin horizontal-align {
	float: none;
	margin-left: auto;
	margin-right: auto;
}

%horizontal-align {
	@include horizontal-align;
}

%clearfix {
	&:before,
	&:after {
		display: table;
		content: " ";
	}

	&:after {
		clear: both;
	}
}

.clearfix {
	@extend %clearfix;
}

%link-underline {
	&, a {
		text-decoration: underline;

		&:hover, a:hover {
			text-decoration: none;
		}
	}
}

%no-link-underline {
	&, a {
		text-decoration: none;

		&:hover, a:hover {
			text-decoration: underline;
		}
	}
}

@mixin wpe-transition( $element: all, $time: 0.1s, $delay: 0s ) {
	transition: $element $time cubic-bezier(0.42, 0, 0.58, 1) $delay;
}

%transition {
	@include wpe-transition();
}

@mixin fontawesome {
	display: inline-block;
	font-family: FontAwesome;
	font-weight: normal;
	font-style: normal;
	text-decoration: inherit;
}

%fontawesome {
	@include fontawesome;
}

// Common design element is to have a gray background with two cut corners
@mixin box( $background-color ) {
	@include corners();
	background-color: $background-color;
	padding: $gutter-small;
	margin: 0 #{$gutter-tiny / 2} $gutter-tiny;

	*:last-child {
		margin-bottom: 0;
	}

	@media (min-width: $md) {
		padding: $gutter;
	}
}

%gray-1-box {
	@include box( $color-grayscale-1 );
}

%gray-2-box {
	@include box( $color-grayscale-2 );
}

%white-box {
	@include box( $color-white );
}

%gable-box {
	@include box( $color-gable );
	color: $color-white;
}

%background-quote {
	position: relative;

	&:before {
		position: absolute;
		display: block;
		content: '';
		top: 10px;
		left: 0;
		width: 60px;
		height: 50px;
		background-image: url(#{$imagepath}/icons/quote-mark.png);
		background-size: contain;
		background-repeat: no-repeat;
	}
}

/**
 * Renders a simple slider
 *
 * Have a list of three identical elements
 * This will render a sidescroll
 */
@mixin slider( $speed: 10s ) {
	width: 100%;
	overflow: hidden;
	white-space: nowrap;
	transform: translate3d(0, 0, 0);

	> * {
		display: inline-block;
		height: 100%;
		transform: translate3d(0, 0, 0);
		animation: slides #{ $speed * 3 } linear infinite;
		margin: 0;
		max-width: initial;

		&:nth-child(2) {
			left: 100%;
		}

		&:nth-child(3) {
			left: 200%;
		}
	}
}
